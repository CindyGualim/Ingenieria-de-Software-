{"ast":null,"code":"const express = require('express');\nconst bodyParser = require('body-parser');\nconst pool = require('./Connection'); // Asumiendo que tu archivo se llama Connection.js y está en la carpeta connbackend\nconst cors = require('cors');\nconst app = express();\napp.use(cors()); // Permite solicitudes CORS de tu frontend\napp.use(express.json()); // Para parsear JSON en el cuerpo de las solicitudes\n\napp.post('/login', async (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n  console.log(`Attempting login with email: ${email} and password: ${password}`);\n  try {\n    const connection = await pool.getConnection();\n    try {\n      const [results] = await connection.query('SELECT id FROM user WHERE email = ? AND password = ?', [email, password]);\n      console.log(results); // Ver qué está devolviendo la base de datos\n      if (results.length > 0) {\n        res.json({\n          success: true,\n          message: \"Login successful\",\n          user: results[0]\n        });\n      } else {\n        res.status(401).json({\n          success: false,\n          message: \"Invalid credentials\"\n        });\n      }\n    } finally {\n      connection.release();\n    }\n  } catch (error) {\n    console.error('Database error:', error);\n    res.status(500).json({\n      success: false,\n      message: \"Internal server error\"\n    });\n  }\n});\nconst PORT = 3001;\napp.listen(PORT, () => {\n  console.log(`Server running on http://localhost:${PORT}`);\n});","map":{"version":3,"names":["express","require","bodyParser","pool","cors","app","use","json","post","req","res","email","password","body","console","log","connection","getConnection","results","query","length","success","message","user","status","release","error","PORT","listen"],"sources":["C:/Users/javie/OneDrive/Documentos/GitHub/LOGIN/Ingenieria-de-Software-/reactjs/src/connbackend/testing.js"],"sourcesContent":["const express = require('express');\r\nconst bodyParser = require('body-parser');\r\nconst pool = require('./Connection');  // Asumiendo que tu archivo se llama Connection.js y está en la carpeta connbackend\r\nconst cors = require('cors');\r\n\r\nconst app = express();\r\napp.use(cors());  // Permite solicitudes CORS de tu frontend\r\napp.use(express.json());  // Para parsear JSON en el cuerpo de las solicitudes\r\n\r\napp.post('/login', async (req, res) => {\r\n    const { email, password } = req.body;\r\n    console.log(`Attempting login with email: ${email} and password: ${password}`);\r\n    try {\r\n        const connection = await pool.getConnection();\r\n        try {\r\n            const [results] = await connection.query(\r\n                'SELECT id FROM user WHERE email = ? AND password = ?',\r\n                [email, password]\r\n            );\r\n            console.log(results);  // Ver qué está devolviendo la base de datos\r\n            if (results.length > 0) {\r\n                res.json({ success: true, message: \"Login successful\", user: results[0] });\r\n            } else {\r\n                res.status(401).json({ success: false, message: \"Invalid credentials\" });\r\n            }\r\n        } finally {\r\n            connection.release();\r\n        }\r\n    } catch (error) {\r\n        console.error('Database error:', error);\r\n        res.status(500).json({ success: false, message: \"Internal server error\" });\r\n    }\r\n});\r\n\r\n\r\nconst PORT = 3001;\r\napp.listen(PORT, () => {\r\n    console.log(`Server running on http://localhost:${PORT}`);\r\n});\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAa,CAAC;AACzC,MAAME,IAAI,GAAGF,OAAO,CAAC,cAAc,CAAC,CAAC,CAAE;AACvC,MAAMG,IAAI,GAAGH,OAAO,CAAC,MAAM,CAAC;AAE5B,MAAMI,GAAG,GAAGL,OAAO,CAAC,CAAC;AACrBK,GAAG,CAACC,GAAG,CAACF,IAAI,CAAC,CAAC,CAAC,CAAC,CAAE;AAClBC,GAAG,CAACC,GAAG,CAACN,OAAO,CAACO,IAAI,CAAC,CAAC,CAAC,CAAC,CAAE;;AAE1BF,GAAG,CAACG,IAAI,CAAC,QAAQ,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACnC,MAAM;IAAEC,KAAK;IAAEC;EAAS,CAAC,GAAGH,GAAG,CAACI,IAAI;EACpCC,OAAO,CAACC,GAAG,CAAE,gCAA+BJ,KAAM,kBAAiBC,QAAS,EAAC,CAAC;EAC9E,IAAI;IACA,MAAMI,UAAU,GAAG,MAAMb,IAAI,CAACc,aAAa,CAAC,CAAC;IAC7C,IAAI;MACA,MAAM,CAACC,OAAO,CAAC,GAAG,MAAMF,UAAU,CAACG,KAAK,CACpC,sDAAsD,EACtD,CAACR,KAAK,EAAEC,QAAQ,CACpB,CAAC;MACDE,OAAO,CAACC,GAAG,CAACG,OAAO,CAAC,CAAC,CAAE;MACvB,IAAIA,OAAO,CAACE,MAAM,GAAG,CAAC,EAAE;QACpBV,GAAG,CAACH,IAAI,CAAC;UAAEc,OAAO,EAAE,IAAI;UAAEC,OAAO,EAAE,kBAAkB;UAAEC,IAAI,EAAEL,OAAO,CAAC,CAAC;QAAE,CAAC,CAAC;MAC9E,CAAC,MAAM;QACHR,GAAG,CAACc,MAAM,CAAC,GAAG,CAAC,CAACjB,IAAI,CAAC;UAAEc,OAAO,EAAE,KAAK;UAAEC,OAAO,EAAE;QAAsB,CAAC,CAAC;MAC5E;IACJ,CAAC,SAAS;MACNN,UAAU,CAACS,OAAO,CAAC,CAAC;IACxB;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZZ,OAAO,CAACY,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;IACvChB,GAAG,CAACc,MAAM,CAAC,GAAG,CAAC,CAACjB,IAAI,CAAC;MAAEc,OAAO,EAAE,KAAK;MAAEC,OAAO,EAAE;IAAwB,CAAC,CAAC;EAC9E;AACJ,CAAC,CAAC;AAGF,MAAMK,IAAI,GAAG,IAAI;AACjBtB,GAAG,CAACuB,MAAM,CAACD,IAAI,EAAE,MAAM;EACnBb,OAAO,CAACC,GAAG,CAAE,sCAAqCY,IAAK,EAAC,CAAC;AAC7D,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}